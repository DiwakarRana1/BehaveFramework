permissions:
  contents: write

name: Run Behave Tests

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [closed]  # Detect PR merges

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: true  # Deploy job should run even if tests fail

    services:
      postgres-db:
        image: postgres:15.5-alpine
        env:
          POSTGRES_DB: "healenium"
          POSTGRES_USER: "healenium_user"
          POSTGRES_PASSWORD: "YDk2nmNs4s9aCP6K"
          POSTGRES_SCHEMA: "healenium"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      healenium:
        image: healenium/hlm-backend:3.4.6
        env:
          SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres-db:5432/healenium"
          SPRING_DATASOURCE_USERNAME: "healenium_user"
          SPRING_DATASOURCE_PASSWORD: "YDk2nmNs4s9aCP6K"
          SPRING_JPA_DATABASE: "postgresql"
          SPRING_JPA_DATABASE_PLATFORM: "org.hibernate.dialect.PostgreSQLDialect"
          SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
          SPRING_JPA_SHOW_SQL: "true"
          SPRING_LIQUIBASE_ENABLED: "false"
          KEY_SELECTOR_URL: "false"
          COLLECT_METRICS: "true"
          FIND_ELEMENTS_AUTO_HEALING: "true"
          HLM_LOG_LEVEL: "debug"
        ports:
          - 7878:7878
        options: >-
          --health-cmd "curl -f http://localhost:7878/actuator/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      selector-imitator:
        image: healenium/hlm-selector-imitator:1.4
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/actuator/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      hlm-proxy:
        image: healenium/hlm-proxy:2.1.1
        env:
          RECOVERY_TRIES: "3"
          SCORE_CAP: ".2"
          HEAL_ENABLED: "true"
          SELENIUM_SERVER_URL: "http://selenium-hub:4444/wd/hub"
          HEALENIUM_SERVER_URL: "http://healenium:7878"
          HEALENIUM_SERVICE: "http://healenium:7878"
          IMITATE_SERVICE: "http://selector-imitator:8000"
          HLM_LOG_LEVEL: "info"
        ports:
          - 8085:8085
        options: >-
          --health-cmd "curl -f http://localhost:8085/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      selenium-hub:
        image: selenium/hub:latest
        ports:
          - 4442:4442
          - 4443:4443
          - 4444:4444
        options: >-
          --health-cmd "curl -f http://localhost:4444/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      chrome:
        image: selenium/node-chrome:latest
        env:
          SE_EVENT_BUS_HOST: "selenium-hub"
          SE_EVENT_BUS_PUBLISH_PORT: "4442"
          SE_EVENT_BUS_SUBSCRIBE_PORT: "4443"
          SE_NODE_MAX_INSTANCES: "5"
          SE_NODE_MAX_SESSIONS: "5"
          SE_NODE_SESSION_TIMEOUT: "20"
        options: >-
          --health-cmd "curl -f http://localhost:5555/wd/hub/status || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache Allure Installation
        id: cache-allure
        uses: actions/cache@v3
        with:
          path: /opt/allure
          key: ${{ runner.os }}-allure-latest

      - name: Install Allure (if not cached)
        if: steps.cache-allure.outputs.cache-hit != 'true'
        run: |
          LATEST_ALLURE_VERSION=$(curl -s https://api.github.com/repos/allure-framework/allure2/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          wget https://github.com/allure-framework/allure2/releases/download/${LATEST_ALLURE_VERSION}/allure-${LATEST_ALLURE_VERSION}.tgz
          tar -zxvf allure-${LATEST_ALLURE_VERSION}.tgz
          sudo mv allure-${LATEST_ALLURE_VERSION} /opt/allure

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to be ready..."
          sleep 30  # Give services time to initialize
          curl -f http://localhost:7878/actuator/health || exit 1
          curl -f http://localhost:8000/actuator/health || exit 1
          curl -f http://localhost:8085/status || exit 1
          curl -f http://localhost:4444/wd/hub/status || exit 1

      - name: Run Behave Tests
        run: |
          mkdir -p reports/allure-results
          # Run tests with Healenium disabled/enabled
          behave -f allure_behave.formatter:AllureFormatter -o reports/allure-results --define healenium=false || echo "Behave tests failed"

      - name: Generate Allure HTML Report
        if: success() || failure()  # Run this step even if previous steps fail
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            /opt/allure/bin/allure generate reports/allure-results -o reports/allure-report --clean
          else
            echo "No Allure results found to generate report."
            mkdir -p reports/allure-report
            echo "<html><body><h2>No test results found</h2></body></html>" > reports/allure-report/index.html
          fi

      - name: Upload Allure HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-html-report
          path: reports/allure-report

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Allure HTML Report
        uses: actions/download-artifact@v4
        with:
          name: allure-html-report
          path: ./allure-report

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          force_orphan: true

  email:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: >
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'master'

    steps:
      - name: Set Email Subject Based on Test Result
        id: set_subject
        run: |
          if [ "${{ needs.test.result }}" == "success" ]; then
            echo "subject=Tests Passed on Merge to Master" >> $GITHUB_OUTPUT
          else
            echo "subject=Tests Failed on Merge to Master" >> $GITHUB_OUTPUT
          fi

      - name: Send Email with Allure Report Link
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ steps.set_subject.outputs.subject }}
          to: rahul.dash@cloudsufi.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            Hello,

            A PR was merged into the master branch and the tests have run.

            View the full Allure Report here:
            https://diwakarrana1.github.io/BehaveFramework/

            Regards,  
            Diwakar Rana
